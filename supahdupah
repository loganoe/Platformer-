<!DOCTYPE html>
<html>
<body>

<style>
    #playercanvas {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 999;
    }
    body {
        margin: 0;
    }
</style>
<canvas id="maincanvas" width="700" height="500" style="border:1px solid black"></canvas>
<!-- we need another canvas because we don't want to render the background again every frame-->
<canvas id="playercanvas" width="700" height="500" style="border:1px solid black"></canvas>

<script>
    // 25 px blocks, 28 blocks on x axis, 20 blocks on y axis
    // 0 is empty space, 1 is a block, # is the end, and @ is the player.
var goal = [];
var player = [];


var lvl1 = [ "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
             "0", "0", "0", "@", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "#", "0", "0",
             "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
]
const canvas = document.getElementById("maincanvas");
const ctx = canvas.getContext("2d");
const cvas = document.getElementById("playercanvas");
const pctx = canvas.getContext("2d");
setInterval(updatePlayer, 10);
const keysPressed = {};
// function to check if a key is pressed
document.addEventListener('keydown', (event) => {
  keysPressed[event.key] = true; // mark the key as pressed
});

document.addEventListener('keyup', (event) => {
  keysPressed[event.key] = false; // mark the key as released
});
function isKeyPressed(code) {
  return !!keysPressed[code];
}

function updatePlayer() {
    pctx.clearRect(player[0], player[1], 25, 25);
    if (isKeyPressed("ArrowRight") || isKeyPressed("d")) {
        player[0] += 2;
    }
    if (isKeyPressed("ArrowLeft") || isKeyPressed("a")) {
        player[0] -= 2;
    }
    if (isKeyPressed("ArrowUp") || isKeyPressed("w")) {
        player[1] -= 2;
    }
    if (isKeyPressed("ArrowRight") || isKeyPressed("s")) {
        player[1] += 2;
    }
    pctx.fillStyle = "red";
    pctx.fillRect(player[0], player[1], 25, 25);
    console.log(player[0], player[1]);
}
i = 0;
total = 560; 
// do the rendering of the initial level 
function renderLevel() {
    while (i < total) {
        // calculate xy coords from i:
        var y = 25 * (Math.floor(i/28));
        var x = 25 * (i % 28);
        switch (lvl1[i]) {
            case "0":
                i++;
                break;
            case "1": 
                ctx.fillStyle = "black";
                ctx.fillRect(x, y, 25, 25);
                i++;
                break;
            case "#":
                ctx.fillStyle = "yellow";
                ctx.fillRect(x, y, 25, 25);
                i++;
                goal.push(x,y);
                break;
            case "@":
                player.push(x,y);
                i++;
            default: 
                // insane error handling
                console.log("thats not supposed to happen");
                // just continue so it doesn't get stuck in a while loop
                i++;
        }
        console.log(i);
    }
}

renderLevel();

// ctx.fillStyle = "pink";
// ctx.fillRect(10,10, 150,100);
</script> 

</body>
</html>
